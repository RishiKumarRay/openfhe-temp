name: 'template'
description: 'composite github actions'
inputs:
  module_name:
    description: 'Name of the module'
    required: true
    default: 'default'
  cmake-args:
    description: 'Argument for cmake command'
    required: true
    default: '-DBUILD_EXTRAS=ON -DWITH_TCM=Y -DMATHBACKEND=4'
  run_beanchmark:
    description: 'Run Beanchmark stages'
    required: false

runs:
  using: "composite"
  steps:

    # build
    - name: '${{ inputs.module_name }}_build'
      run: |
        whoami
        mkdir -p build
        cd build
        cmake ${{ inputs.cmake-args }}
        make -j $(nproc) all
        make allextras

    # binfhe
    - name: '${{ inputs.module_name }}_test_binfhe'
      run: |
        pwd
        echo $LD_LIBRARY_PATH
        build/unittest/binfhe_tests --gtest_output=xml

    # test_core
    - name: '${{ inputs.module_name }}_test_core'
      run: |
        pwd
        echo $LD_LIBRARY_PATH
        build/unittest/core_tests --gtest_output=xml

    # test_pke
    - name: '${{ inputs.module_name }}_test_pke'
      run: |
        pwd
        echo $LD_LIBRARY_PATH
        build/unittest/pke_tests --gtest_output=xml

    # beanchmark
    - name: benchmark_basic
      if: ${{ inputs.run_beanchmark }}
      run: |
        build/bin/benchmark/basic_test --benchmark_out="${CI_JOB_NAME}_${CI_COMMIT_SHA}" --benchmark_out_format=csv
    - name: benchmark_binfhe_ap
      if: ${{ inputs.run_beanchmark }}
      run: |
        build/bin/benchmark/binfhe-ap --benchmark_out="${CI_JOB_NAME}_${CI_COMMIT_SHA}" --benchmark_out_format=csv
    - name: benchmark_binfhe_ginx
      if: ${{ inputs.run_beanchmark }}
      run: |
        build/bin/benchmark/binfhe-ginx --benchmark_out="${CI_JOB_NAME}_${CI_COMMIT_SHA}" --benchmark_out_format=csv
    - name: benchmark_encoding
      if: ${{ inputs.run_beanchmark }}
      run: |
        build/bin/benchmark/Encoding --benchmark_out="${CI_JOB_NAME}_${CI_COMMIT_SHA}" --benchmark_out_format=csv
    - name: benchmark_integermath
      if: ${{ inputs.run_beanchmark }}
      run: |
        build/bin/benchmark/IntegerMath --benchmark_out="${CI_JOB_NAME}_${CI_COMMIT_SHA}" --benchmark_out_format=csv
    - name: benchmark_lattice
      if: ${{ inputs.run_beanchmark }}
      run: |
        build/bin/benchmark/Lattice --benchmark_out="${CI_JOB_NAME}_${CI_COMMIT_SHA}" --benchmark_out_format=csv
    - name: benchmark_lib
      if: ${{ inputs.run_beanchmark }}
      run: |
        build/bin/benchmark/lib-benchmark --benchmark_out="${CI_JOB_NAME}_${CI_COMMIT_SHA}" --benchmark_out_format=csv
    - name: benchmark_nbtheory
      if: ${{ inputs.run_beanchmark }}
      run: |
        build/bin/benchmark/NbTheory --benchmark_out="${CI_JOB_NAME}_${CI_COMMIT_SHA}" --benchmark_out_format=csv
    - name: benchmark_poly_1k
      if: ${{ inputs.run_beanchmark }}
      run: |
        build/bin/benchmark/poly-benchmark-1k --benchmark_out="${CI_JOB_NAME}_${CI_COMMIT_SHA}" --benchmark_out_format=csv
    - name: benchmark_poly_4k_
      if: ${{ inputs.run_beanchmark }}
      run: |
        build/bin/benchmark/poly-benchmark-4k --benchmark_out="${CI_JOB_NAME}_${CI_COMMIT_SHA}" --benchmark_out_format=csv
    - name: benchmark_poly_16k
      if: ${{ inputs.run_beanchmark }}
      run: |
        build/bin/benchmark/poly-benchmark-16k --benchmark_out="${CI_JOB_NAME}_${CI_COMMIT_SHA}" --benchmark_out_format=csv
    - name: benchmark_vectormath
      if: ${{ inputs.run_beanchmark }}
      run: |
        build/bin/benchmark/VectorMath --benchmark_out="${CI_JOB_NAME}_${CI_COMMIT_SHA}" --benchmark_out_format=csv

    # extract
    - name: '${{ inputs.module_name }}_extras_core'
      run: |
        ./build/bin/extras/core/dft
        ./build/bin/extras/core/math
        ./build/bin/extras/core/ntt1
        ./build/bin/extras/core/ntt2
    
    # cleanup
    - name: '${{ inputs.module_name }}_cleanup'
      run: rm -rf build